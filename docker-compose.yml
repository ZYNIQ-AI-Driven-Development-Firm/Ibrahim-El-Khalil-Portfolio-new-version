services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: portfolio_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-portfolio_db}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - portfolio_network

  # Backend FastAPI Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_backend
    restart: unless-stopped
    environment:
      MONGO_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${DATABASE_NAME:-portfolio_db}?authSource=admin
      DATABASE_NAME: ${DATABASE_NAME:-portfolio_db}
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8001:8001"
    depends_on:
      - mongodb
    volumes:
      - ./backend:/app
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        GEMINI_API_KEY: ${GEMINI_API_KEY}
    container_name: portfolio_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8001/api
      REACT_APP_BACKEND_URL: http://backend:8001
      REACT_APP_GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - portfolio_network

# Networks
networks:
  portfolio_network:
    driver: bridge

# Volumes
volumes:
  mongodb_data:
    driver: local